{"version":3,"sources":["components/Search.jsx","components/Ten.jsx","redux/thunk.js","redux/actions.js","redux/reducers.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","react_default","a","createElement","className","placeholder","index_esm","TopTen","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","fetch","method","dataType","headers","Access-Control-Allow-Origin","then","res","console","log","React","Component","mapDispatchToProps","loadDataThunk","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","result","wrap","_context","prev","next","mode","Content-Type","sent","json","status","type","stop","_x","apply","arguments","connect","initState","listReducer","length","undefined","action","objectSpread","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","App","es","components_Search","Ten","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4QAeeA,SATC,SAAAC,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAASC,YAAW,kBACrCJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,wFCJNC,cAEF,SAAAA,EAAYP,GAAM,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KACDe,MAAM,CACPC,KAAK,OAHKR,mFAOdS,MAAK,gFAAiF,CAClFC,OAAO,MAEPC,SAAS,QACTC,QAAQ,CACJC,8BAA+B,OAGtCC,KAAK,SAAAC,GACFC,QAAQC,IAAIF,sCAIhB,OAEItB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,IAAuBO,KAAKI,MAAMC,KAAlC,YAxBSU,IAAMC,WA6BrBC,EAAmB,CAACC,cChCG,WACzB,sBAAAC,EAAArB,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAA9B,EAAA+B,KAAO,SAAAC,EAAMC,GAAN,IAAAZ,EAAAa,EAAA,OAAAJ,EAAA9B,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACevB,MAAK,gFAAiF,CACpGC,OAAO,MACPuB,KAAM,OACNrB,QAAS,CAACsB,eAAe,sBAJ1B,cACGnB,EADHe,EAAAK,KAAAL,EAAAE,KAAA,EAMmBjB,EAAIqB,OANvB,OAMGR,EANHE,EAAAK,KAOgB,MAAfpB,EAAIsB,QAAkBT,GACtBD,ECTL,CACFW,KAJoB,YAKpB9B,KDOyBoB,IARnB,wBAAAE,EAAAS,SAAAb,MAAP,gBAAAc,GAAA,OAAAlB,EAAAmB,MAAAtC,KAAAuC,YAAA,KDgCWC,cAAQ,KAAKvB,EAAbuB,CAAkC5C,kBGlC3C6C,EAAY,CACdpC,KAAM,IAeKqC,EAZG,WAA8B,IAA5BtC,EAA4BmC,UAAAI,OAAA,QAAAC,IAAAL,UAAA,GAAAA,UAAA,GAApBE,EAAWI,EAASN,UAAAI,OAAA,EAAAJ,UAAA,QAAAK,EAC5C,OAAOC,EAAOV,MACV,IDRiB,YCSb,OAAOrC,OAAAgD,EAAA,EAAAhD,CAAA,GACAM,EADP,CAEIC,KAAMwC,EAAOxC,OAErB,QACI,OAAOD,YCTb2C,EAAcC,YAAgB,CAACN,gBAKtBO,EAHDC,YAAYH,EAAaI,YAAgBC,YCaxCC,MAZf,WACE,OACE/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAUL,MAAOA,GACf3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC+D,EAAD,MACAjE,EAAAC,EAAAC,cAACgE,EAAD,MACAlE,EAAAC,EAAAC,cAAA,kCCFYiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC","file":"static/js/main.59b3cc12.chunk.js","sourcesContent":["import React from 'react';\nimport {FaSistrix} from 'react-icons/fa'\nimport './css/Search.css'\n\n\n\n const Search = props =>{\n    return(\n        <div>\n            <input className=\"search\" placeholder={`搜尋 `}/> \n            <FaSistrix />\n        </div>\n    )\n}\n\nexport default Search","import React from 'react';\nimport './css/TopTen.css'\nimport {connect} from 'react-redux'\nimport {loadDataThunk} from '../redux/thunk'\n\n\nclass TopTen extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state={\n            data:\"App\"\n        }\n    }\n    componentDidMount(){\n        fetch(`https://rss.itunes.apple.com/api/v1/hk/ios-apps/top-free/all/10/explicit.json`,{\n            method:\"GET\",\n            // mode:\"no-cors\",\n            dataType:\"jsonp\",\n            headers:{\n                \"Access-Control-Allow-Origin\": \"*\"\n            }\n        })\n        .then(res=>{\n            console.log(res)\n        })\n    }\n    render(){\n        return (\n\n            <div className='app'> {this.state.data} </div>\n        )\n    }\n}\n\nconst mapDispatchToProps={loadDataThunk}\nexport default connect(null,mapDispatchToProps )(TopTen)\n","import {loadData} from './actions'\n\n\nexport const loadDataThunk = ()=>{\n    return async(dispatch)=>{\n        const res = await fetch(`https://rss.itunes.apple.com/api/v1/hk/ios-apps/top-free/all/10/explicit.json`,{\n            method:\"GET\",\n            mode: \"cors\",\n            headers: {\"Content-Type\":\"application/json\"}\n        })\n        const result =  await res.json()\n        if (res.status === 200 && result){\n            dispatch(loadData(result))\n        }\n    }\n}","export const LOAD_DATA = \"LOAD_DATA\"\n\nexport  const loadData=(data)=>{\n return{\n     type: LOAD_DATA,\n     data\n }\n}\n","import {LOAD_DATA}  from './actions'\n\nconst initState = {\n    data: {}\n}\n\nconst listReducer=( state = initState, action)=>{\n    switch(action.type){\n        case LOAD_DATA:\n            return {\n                ...state,\n                data: action.data\n            }\n        default:\n            return state\n    }\n}\n\nexport default listReducer","import {createStore, applyMiddleware, combineReducers} from 'redux';\nimport listReducer from './redux/reducers'\nimport thunk from 'redux-thunk'\n\n\nconst rootReducer = combineReducers({listReducer})\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\n\nexport default store","import React from 'react';\nimport Search from './components/Search'\nimport TopTen from './components/Ten'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\" >\n        <Search />\n        <TopTen />\n        <div> 100 Recommend  </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}